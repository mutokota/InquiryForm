volumes:
  db-volume:
  maildir: {}
# 1番上の階層、決まり文句のようなもの。
services:
  # 2番目の階層、作りたいコンテナを定義する。任意の名前をつけられる。
  php-app:
    # コンテナ名
    container_name: run-php-app
    # ビルドするDockerfileの場所
    build: ./app
    # ポート
    ports:
      - "18080:80"
    # ローカルPCとコンテナ間でディレクトリをバインド（同期）できる
    volumes:
      - ./app/src:/var/www/html/
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
    # 利用するネットワーク
    networks:
      - php-mysql-networks
    # 指定したサービスの後にコンテナを起動する
    depends_on:
      - php-db
  php-db:
    image: mysql:8.0
    container_name: run-php-db
    ports:
      - "3307:3306"
    # コンテナの環境変数を指定できる
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=test
      - MYSQL_PASSWORD=test
      - MYSQL_DATABASE=test_db
    # DBの永続化のボリュームも指定できる
    volumes:
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
    networks:
      - php-mysql-networks
  # DBをUIで確認できるツール
  php-adminer:
    container_name: adminer
    image: adminer:4.8.1
    ports:
      - 8081:8080
    networks:
      - php-mysql-networks
    depends_on:
      - php-db
  mail:
    image: mailhog/mailhog:latest
    container_name: mailhog
    ports:
      - "8025:8025"
      - "1025:1025"
    environment:
      MH_STORAGE: maildir
      MH_MAILDIR_PATH: /tmp
    networks:
      - php-mysql-networks
# 任意のネットワークを作る(わかりやすくするため)
networks:
  php-mysql-networks:
